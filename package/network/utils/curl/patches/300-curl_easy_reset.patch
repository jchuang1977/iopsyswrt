--- a/include/curl/easy.h
+++ b/include/curl/easy.h
@@ -74,6 +74,19 @@
 CURL_EXTERN void curl_easy_reset(CURL *curl);
 
 /*
+ * NAME curl_easy_reset_no_auth()
+ *
+ * DESCRIPTION
+ *
+ * Re-initializes a CURL handle to the default values. This puts back the
+ * handle to the same state as it was in when it was just created.
+ *
+ * It does keep: live connections, the Session ID cache, the DNS cache and the
+ * cookies.
+ */
+CURL_EXTERN void curl_easy_reset_no_auth(CURL *curl);
+
+/*
  * NAME curl_easy_recv()
  *
  * DESCRIPTION
--- a/lib/easy.c
+++ b/lib/easy.c
@@ -952,6 +952,47 @@
 }
 
 /*
+ * curl_easy_reset_no_auth() is an external interface that allows an app to re-
+ * initialize a session handle to the default values.
+ */
+void curl_easy_reset_no_auth(struct Curl_easy *data)
+{
+  long old_buffer_size = data->set.buffer_size;
+
+  Curl_free_request_state(data);
+
+  /* zero out UserDefined data: */
+  Curl_freeset(data);
+  memset(&data->set, 0, sizeof(struct UserDefined));
+  (void)Curl_init_userdefined(data);
+
+  /* zero out Progress data: */
+  memset(&data->progress, 0, sizeof(struct Progress));
+
+  /* zero out PureInfo data: */
+  Curl_initinfo(data);
+
+  data->progress.flags |= PGRS_HIDE;
+  data->state.current_speed = -1; /* init to negative == impossible */
+
+#if !defined(CURL_DISABLE_HTTP) && !defined(CURL_DISABLE_CRYPTO_AUTH)
+  Curl_http_auth_cleanup_digest(data);
+#endif
+
+  /* resize receive buffer */
+  if(old_buffer_size != data->set.buffer_size) {
+    char *newbuff = realloc(data->state.buffer, data->set.buffer_size + 1);
+    if(!newbuff) {
+      DEBUGF(fprintf(stderr, "Error: realloc of buffer failed\n"));
+      /* nothing we can do here except use the old size */
+      data->set.buffer_size = old_buffer_size;
+    }
+    else
+      data->state.buffer = newbuff;
+  }
+}
+
+/*
  * curl_easy_pause() allows an application to pause or unpause a specific
  * transfer and direction. This function sets the full new state for the
  * current connection this easy handle operates on.
